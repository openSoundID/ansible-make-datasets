---

   - name: check if MP3 file exists
     stat: 
       path: "{{ rec_download_directory }}/{{ recID }}.mp3"
       get_checksum: no
     register: mp3_file

   - name: check if wav file exists
     stat: 
       path: "{{ rec_wav_directory }}/{{ recID }}-mono.wav"
       get_checksum: no
     register: mono_wav_file

   - name: Download record MP3 files from xeno-canto for XC Record
     get_url:
       url: https://www.xeno-canto.org/{{ recID | regex_replace("XC-","")  }}/download
       dest: "{{ rec_download_directory }}/{{ recID }}.mp3"
       timeout: 60
     ignore_errors: true
     register: register_get_url
     when: "mp3_file.stat.exists == false and recID.split('-')[0] == 'XC'"

   - name: Copy record MP3 files from directory for Noise Record
     copy:
       src: "{{ noise_src_directory }}/{{ birdID }}/{{ recID | regex_replace('^NO-','') }}.mp3"
       dest: "{{ rec_download_directory }}/{{ recID }}.mp3"
     when: "mp3_file.stat.exists == false and recID.split('-')[0] == 'NO'"

   - name: check if MP3 file exists
     stat:
       path: "{{ rec_download_directory }}/{{ recID }}.mp3"
       get_checksum: no
     register: mp3_file

   - name: MP3 exist
     block:

       - name: Create temporary directory
         tempfile:
           state: directory
           suffix: dataset
         register: temp_dataset_directory

       - name: creer les chaines de commmande permettant de convertir mp3 en wav
         set_fact: sox_wav_to_monowav="sox -R \"{{ rec_download_directory }}/{{ recID }}.mp3\"  -r {{ sox_rate }} -c 1 -b {{ sox_bitsnumber }} \"{{ temp_dataset_directory.path }}/{{ recID }}-monotmp.wav\" highpass {{ sox_high_pass }} norm {{ sox_norm_db }}"
                   extract_noise_from_wav="{{ root_dir }}/bin/extractnoise.py {{ temp_dataset_directory.path }}/{{ recID }}-monotmp.wav {{ temp_dataset_directory.path }}/{{ recID }}-noise.wav"
                   monowav_to_profile="/usr/bin/sox -R \"{{ temp_dataset_directory.path }}/{{ recID }}-noise.wav\" -n noiseprof {{ temp_dataset_directory.path }}/noise_balbucam_file"
                   denoise="/usr/bin/sox -R \"{{ temp_dataset_directory.path }}/{{ recID }}-monotmp.wav\" \"{{ temp_dataset_directory.path }}/{{ recID }}-monotmp2.wav\" noisered {{ temp_dataset_directory.path }}/noise_balbucam_file {{ sox_denoise_level }}"
                   noise_wav="/usr/bin/ffmpeg -i \"{{ temp_dataset_directory.path }}/{{ recID }}-monotmp2.wav\" -filter_complex \"amovie={{ ffmpeg_noise_wav_file }}:loop={{ ffmpeg_noise_loop }}[s];[s]volume={{ ffmpeg_noise_volume }}[s1];[0][s1]amix=duration=shortest\" \"{{ rec_wav_directory }}/{{ recID }}-mono.wav\""

       - name: convert MP3 to wav   
         shell: "{{ sox_wav_to_monowav }}"
         register: sox_wav_to_monowav

       - name: extract noise from wav file
         shell: "{{ extract_noise_from_wav }}"

       - name: check if noise exist
         stat:
           path: "{{ temp_dataset_directory.path }}/{{ recID }}-noise.wav"
           get_checksum: no
         register: noise_wav_file

       - name: copy if noise not generated
         copy:
           src: "{{ temp_dataset_directory.path }}/{{ recID }}-monotmp.wav"
           dest: "{{ temp_dataset_directory.path }}/{{ recID }}-noise.wav" 
           remote_src: yes
         register: copy_noise_wav_file
         when: noise_wav_file.stat.exists == false
  
       - name: generate noise profile   
         shell: "{{ monowav_to_profile }}"
         register: monowav_to_profile

       - name: remove noise    
         shell: "{{ denoise }}"
         register: denoise

       - name: generate microphone noise in the file   
         shell: "{{ noise_wav }}"
         register: noise_wav
 
       - name: delete temporary file
         file: 
           path: "{{ temp_dataset_directory.path }}"
           state: absent
         async: 240
         poll: 0

     when: mp3_file.stat.exists == true and mono_wav_file.stat.exists == false

