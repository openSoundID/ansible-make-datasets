#!/usr/bin/env python3

import essentia
import essentia.standard
import sys
import numpy as np
import scipy.stats as stats
from essentia.standard import *

#############################

inputfilename=sys.argv[1]
outputfilename=sys.argv[2]

#############################


loader = MonoLoader(filename=inputfilename,sampleRate={{ essentia_samplerate }},downmix='left')
w = Windowing(type = '{{ essentia_windowtype }}')
spectrum = Spectrum(size={{ essentia_spectrumsize }})
pool = essentia.Pool()
mfcc = MFCC(lowFrequencyBound={{ essentia_lowfrequencybound }},highFrequencyBound={{ essentia_highfrequencybound }},sampleRate={{ essentia_samplerate }},numberBands={{ essentia_mfcc_numberbands }},normalize='{{ essentia_mfcc_normalize }}',warpingFormula='{{ essentia_mfcc_warpingFormula }}',weighting='{{ essentia_mfcc_weighting }}')
energy = Energy()
envelope = Envelope(attackTime={{ essentia_envelope_attackTime }},releaseTime={{ essentia_envelope_releaseTime }},sampleRate={{ essentia_samplerate }})



logNorm = UnaryOperator(type='{{ essentia_logNorm_type }}')

#############################

mfccs = []
melbands = []
melbands_log = []
averegedEnvelope = []
audio = loader()
chunckID = 0
positions = []
amplitudes = []



signal_envelope=envelope(audio)

for frame in FrameGenerator(signal_envelope, frameSize = {{ essentia_envelope_hopsize }}, hopSize = {{ essentia_envelope_hopsize }}, startFromZero=True,validFrameThresholdRatio=1):
    averegedEnvelope.append(np.percentile(frame,95.0))

envelope_threshold = np.percentile(averegedEnvelope, {{ essentia_averagedenvelope_percentile }})

minPosition={{ essentia_hopsize }}*{{ essentia_PeakDetection_minPosition }}
maxPosition=len(audio)-{{ essentia_hopsize }}*{{ essentia_PeakDetection_maxPosition }}
if (minPosition<maxPosition):
    peakdetect = PeakDetection(maxPeaks={{ essentia_PeakDetection_maxPeaks }},threshold=envelope_threshold+{{ essentia_PeakDetection_threshold }},minPeakDistance={{ essentia_hopsize }}*({{ essentia_PeakDetection_maxAggSize }}/2),range=len(audio),minPosition={{ essentia_hopsize }}*{{ essentia_PeakDetection_minPosition }},maxPosition=len(audio)-{{ essentia_hopsize }}*{{ essentia_PeakDetection_maxPosition }} )
    positions,amplitudes = peakdetect(audio)

pool.add('description.peakdetect_positions', positions)
pool.add('description.peakdetect_amplitudes', amplitudes)

for position in positions:
    startTime=(position/{{ essentia_hopsize }}-{{ essentia_PeakDetection_maxAggSize }}/2-{{ essentia_PeakDetection_deltaOptimizePeakIndice }} )*{{ essentia_hopsize }}/{{ essentia_samplerate }}
    if startTime < 0:
        startTime=0
    endTime=(position/{{ essentia_hopsize }}+1+{{ essentia_PeakDetection_maxAggSize }}/2+{{ essentia_PeakDetection_deltaOptimizePeakIndice }} )*{{ essentia_hopsize }}/{{ essentia_samplerate }}
    if endTime > len(audio)-1:
        endTime=len(audio)-1     
    easyloader = EasyLoader(filename=inputfilename,sampleRate={{ essentia_samplerate }},downmix='mix',replayGain=-6,startTime=startTime, endTime=endTime)
    audio = easyloader()
    for frame in FrameGenerator(audio, frameSize = {{ essentia_framesize }}, hopSize = {{ essentia_hopsize }}, startFromZero=True,validFrameThresholdRatio=1):
        mfcc_bands, mfcc_coeffs = mfcc(spectrum(w(frame)))
        frame_energy = energy(w(frame))
        pool.add('lowlevel.mfccBandLogs', logNorm(mfcc_bands))
        pool.add('lowlevel.energy', frame_energy)
        pool.add('lowlevel.chunckID',chunckID)
    chunckID=chunckID+1
        

output = YamlOutput(filename = outputfilename,format = 'json') 
output(pool)

